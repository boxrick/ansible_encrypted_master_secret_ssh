---
# Example playbook of generating an Ansible Master Key against a certificate, this has been generated against a users ssh private key and can be decrypted by any single key.
- hosts: all
  gather_facts: no
  vars_prompt:
    - name: "ansible_vault_key"
      prompt: "Enter a string to use as Ansible Vault master key. **WARNING THIS WILL REGENERATE MASTER KEY**"
  vars:
    # Secret key location
    generated_master_location: '../use_secrets/ansible_vault_encrypted_password'
    # This is generated mid run
    key_location: []
    # List of keycerts to encrypt against
    user_list:
      rickb:
        public_key_certificate: |
          -----BEGIN CERTIFICATE-----
          MIIFyjCCA7KgAwIBAgIJAJbHUna5cPoPMA0GCSqGSIb3DQEBBQUAMEwxCzAJBgNV
          BAYTAkdCMQowCAYDVQQIFAEqMQowCAYDVQQHFAEqMQowCAYDVQQKFAEqMQowCAYD
          VQQLFAEqMQ0wCwYDVQQDEwRSaWNrMB4XDTE4MDIwOTE4MjM0NloXDTE4MDMxMTE4
          MjM0NlowTDELMAkGA1UEBhMCR0IxCjAIBgNVBAgUASoxCjAIBgNVBAcUASoxCjAI
          BgNVBAoUASoxCjAIBgNVBAsUASoxDTALBgNVBAMTBFJpY2swggIiMA0GCSqGSIb3
          DQEBAQUAA4ICDwAwggIKAoICAQDFmUBxlieui6+8kUjE2KuOdgK+f4v2VBVzvTdA
          8Ez9lxQssAA6BtD8Vp1D2VA1e3X/MLgNY4J6yMNJ+RytoFpCVZO0ae52TUDRlcRZ
          LNpWKb9yCH7Zh4auPkBuGZQhJIVSyRnoFIUUde0hp2W2kA/O71p1rF2bJAf4Ei3Z
          ouUzPTww9z5qGLnf+LZcERkkr1PPyvdeVT9+Ib++MWw7vpv03XG72sm5pwtmm6uW
          +pi208tZz3jz6qT3VbrMpXd6ReBz2cRDI63HE4rq8No7MvrXjqT8sCnXkb9hbpBb
          ZY7tMgyAAKxvN0yGu5rdS4kwD7bGnsq/CMhl8Q9/RV576LG63DsE2S4EfD7Bytvc
          hptHzx9EJhT3oJKfGbyDsDhmvZQkhkEnWEV+4DUISuGSz/vPu+S0ojnqdm97VchO
          Xvk/3xJzG/EF9N5kYFU1UphDeFbwbQfChENq3k7+D7R8xus6vp1HvUs5YUexWV8a
          C3k2+4lqG/EM+Z9eGR9QGCkenimUmGAFQixEk981yBIUQU8Q/La9K0BthilQIiz/
          +GKn+DU9QGVcB4Np2DWRcQ9jwzYyk5sQLQkhKzasddzGIol3UQL6xhvDIXXBoRNk
          rOwm1WWTQpHgN1IT73XA4ZOLl117VTceuos57Ftg5nCKNk1eIKB3IBoAO7qGOJuy
          h/3TgQIDAQABo4GuMIGrMB0GA1UdDgQWBBRoW38NQc8pu5CrabA3qA3Fpg2U+DB8
          BgNVHSMEdTBzgBRoW38NQc8pu5CrabA3qA3Fpg2U+KFQpE4wTDELMAkGA1UEBhMC
          R0IxCjAIBgNVBAgUASoxCjAIBgNVBAcUASoxCjAIBgNVBAoUASoxCjAIBgNVBAsU
          ASoxDTALBgNVBAMTBFJpY2uCCQCWx1J2uXD6DzAMBgNVHRMEBTADAQH/MA0GCSqG
          SIb3DQEBBQUAA4ICAQB5z5Ao5ey8V+ryocgK87CfUqE3beT4GJpb6Y52Z8fW2JIK
          Jsul6PMQ+NsBOyFqNPS7RVzASWay8kQMg+nEpSldoc6yKdx0ECAQ8fCCZ/5twDnX
          fAIFtNAZO4axEdC7SoX0bKR5DRoeGTOxIyoIAuZ621dXIH7hevirAY7Wj+LVx2kE
          KPkCz41KYpRcPtrRrqW+vRJdnx26QHYN0Wx8NqC+bW6TUpQlLiOTXwQcHTzUYZHU
          mt2WdeOAZjoDhUDeV0sRcA0ex/PLOnW0PBffBpbtj1/llloII9t5a1ktgbj4aSVN
          1J3QLFh5tApoQ+GeLFl1KZ5DTUxXTaKlwMDSscYbs+TmsCMLa1JubmEvrafRsSMc
          a3LnJeNJB+Yrou3l0U4wTsOdZ0cKFookI2hMyk5RjjfSEU8i3ZUeprlPDXqu34JS
          QgeyMyq1P/YRYcRc0yqC0+FY39yldgrGNA1GeI+raU3TY6vCZOwAh2YBHS8w/qQV
          Rc7s232e8ES2+dZgDlDoldh8jItQEa5RF6E+aJDU4SsGckSV/WxAUJ+TRqZsUTvc
          ujvMqJAbK5Z3onKBonc5KFdg+WFzNtR751E/9I5OVAHYaLkTCkBiuizpHDlDaSkS
          dqkr/48YAsZZxJ/H5MrPNC4xZOxqzvDtj/LY/i56SZwPuu8ZDS5QDz/l1w5Sjw==
          -----END CERTIFICATE-----
      stuartgr:
        public_key_certificate: |
          -----BEGIN CERTIFICATE-----
          MIIDbzCCAlegAwIBAgIJANQXazg1yxHpMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNV
          BAYTAkdCMQowCAYDVQQIDAEqMQowCAYDVQQHDAEqMQowCAYDVQQKDAEqMQowCAYD
          VQQLDAEqMQ8wDQYDVQQDDAZTdHVhcnQwHhcNMTgwMjA5MTgxNjI0WhcNMTgwMzEx
          MTgxNjI0WjBOMQswCQYDVQQGEwJHQjEKMAgGA1UECAwBKjEKMAgGA1UEBwwBKjEK
          MAgGA1UECgwBKjEKMAgGA1UECwwBKjEPMA0GA1UEAwwGU3R1YXJ0MIIBIjANBgkq
          hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6mMJB3tZS760uFSkUNmWndeFZKKdkj7B
          1bjhg3CBQrAcwijH/9uRUCLAxvdcSzCQn4NZ5n95/3wI1IawrLgZbQbDtipjlU1a
          6am2Z/yikgxfv92Kl1qej1M1o3c0iib1mN0ZqNNF4h7F6YDN3N3vJUzPnBx0vr1T
          UlfIHd7tCcXIImArwcmc2pIXKzL2dqD4xNp7PEHO4P9oi8mcMikPMEN8tHp8n0vq
          w0qq16xeozScbxAVngOFAkSFw/t3PegNWd70RO4HIa/3nUKeDydg2ndJEPZWH0oA
          P25S4TXcNy0p7fvb+Pxvzac1clHWlEA5v0eK6cpjxQ9Twx3oheyupwIDAQABo1Aw
          TjAdBgNVHQ4EFgQUNAGKvAHavbB95jkthRgT2Anyvp0wHwYDVR0jBBgwFoAUNAGK
          vAHavbB95jkthRgT2Anyvp0wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
          AQEAHyvFdp87jbIW7q1QyD4wLlowZUS4QwOYYz3hmAbmqNGvXzonizd6hJEGmvQv
          4HhzqWXtkwgFJyGsmJsU6UyaYWutRcKkkt1CZNmB+WGTJwAeLbJZ/rti7EizjNKI
          3G/gp9MQ99OFNyvB+NLvcA2G/h0Jn1pSY0Zb8O3f1m3YqZEAY43Z4Af+VvfhGek1
          LSpJ+CRGyioAxFCL616pS4wVlNQI7y42SvHRadgF6pRFSxr8A0BxTlZ3xyPkOlTj
          RP1tLyQnLr85bXhft5neBjMBlHinGHZQrGpjlRyIuRBMF7Fh24veH5YbfsrzAWGs
          6aP5cUK5WLP//6AB7pqXz8/pHw==
          -----END CERTIFICATE-----
  tasks:
    - name:  Place cert in temporary file
      copy:
        content: "{{ item.value.public_key_certificate }}"
        dest: "/tmp/{{ item.key }}.cert"
      with_dict: "{{ user_list }}"
      when:
        - item.value.public_key_certificate is defined
      loop_control:
        label: "Placing {{ item.key }} pub certfile onto /tmp/{{ item.key }}.cert"

    - name: Generate a list key locations
      set_fact:
        key_location: "{{ key_location + [ ('/tmp/' + item.key + '.cert') ] }}"
      with_dict: "{{ user_list }}"
      when:
        - item.value.public_key_certificate is defined

    - name: Produce an encrypted blob against all the above cert files - Placed into "{{ generated_master_location }}" file. If using in real system then also re-key encrypted data!
      shell: "echo {{ ansible_vault_key }} | openssl smime -encrypt -aes256 -out {{ generated_master_location }} -outform PEM {{ key_location | join(\' ') }}"
